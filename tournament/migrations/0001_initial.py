# Generated by Django 5.2.1 on 2025-05-16 15:10

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BotSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_file', models.FileField(help_text='The Python (.py) file for the bot.', upload_to='bot_scripts/')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=False, help_text='Is this the currently active bot for the team in official matches?')),
                ('plagiarism_flagged', models.BooleanField(default=False)),
                ('submitted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bot_submissions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The official name of the team.', max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(help_text='The user who created the team.', on_delete=django.db.models.deletion.CASCADE, related_name='created_teams', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(blank=True, help_text='Members of the team.', related_name='members_of_team', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_type', models.CharField(choices=[('TS', 'Test vs System Bot'), ('R1', 'Round One (vs System)'), ('R2', 'Round Two (Team vs Team)'), ('CH', 'Challenge Match')], max_length=2)),
                ('status', models.CharField(choices=[('P', 'Pending'), ('R', 'Running'), ('C', 'Completed'), ('E', 'Error')], default='P', max_length=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('played_at', models.DateTimeField(blank=True, help_text='Timestamp when the match was actually played.', null=True)),
                ('is_player2_system_bot', models.BooleanField(default=False, help_text='True if player2 is the constant system bot.')),
                ('player1_score', models.IntegerField(blank=True, null=True)),
                ('player2_score', models.IntegerField(blank=True, null=True)),
                ('game_log', models.FileField(blank=True, help_text='CSV log file from engine.py.', null=True, upload_to='game_logs/')),
                ('player1_submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_as_player1', to='tournament.botsubmission')),
                ('player2_submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_as_player2', to='tournament.botsubmission')),
                ('winning_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='matches_won', to='tournament.team')),
            ],
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('P', 'Pending'), ('A', 'Accepted'), ('D', 'Declined'), ('C', 'Completed'), ('X', 'Cancelled')], default='P', max_length=1)),
                ('message', models.TextField(blank=True, help_text='Optional message from the challenger.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('match_played', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tournament.match')),
                ('challenged_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_challenges', to='tournament.team')),
                ('challenger_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_challenges', to='tournament.team')),
            ],
        ),
        migrations.AddField(
            model_name='botsubmission',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='tournament.team'),
        ),
        migrations.CreateModel(
            name='LeaderboardScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=0, help_text='Overall score for leaderboard, calculated based on match results.')),
                ('rank', models.PositiveIntegerField(blank=True, help_text="Team's rank on the leaderboard.", null=True)),
                ('matches_played', models.PositiveIntegerField(default=0)),
                ('matches_won', models.PositiveIntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='tournament.team')),
            ],
            options={
                'ordering': ['-score', 'rank'],
                'unique_together': {('team',)},
            },
        ),
    ]
